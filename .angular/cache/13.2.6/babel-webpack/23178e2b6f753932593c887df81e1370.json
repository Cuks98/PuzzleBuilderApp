{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"dragstart\", function BoardComponent_div_1_Template_div_dragstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onDrag($event);\n    })(\"drop\", function BoardComponent_div_1_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onDrop($event);\n    })(\"dragover\", function BoardComponent_div_1_Template_div_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onDragOver($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const piece_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"background-image\", piece_r1.path);\n    i0.ɵɵclassProp(\"placed\", !piece_r1.misplaced);\n    i0.ɵɵproperty(\"id\", piece_r1.index);\n  }\n}\n\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    constructor() {\n      this.rows = 4;\n      this.columns = 4;\n      this.numberOfPieces = this.rows * this.columns;\n      this.moves = 0;\n      this.fails = 0;\n      this.over = false;\n      this.pieces = [];\n      this.statsChange = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.reset();\n    }\n\n    ngOnChanges(changes) {\n      if ((changes['folder'] && changes['folder'].currentValue || changes['image'] && changes['image'].currentValue) && this.pieces.length) {\n        this.reset();\n      }\n    }\n\n    reset() {\n      this.moves = 0;\n      this.fails = 0;\n      this.shufflePieces();\n\n      while (this.numberOfPiecesInPlace > 0) {\n        this.shufflePieces();\n      }\n    }\n\n    get numberOfPiecesInPlace() {\n      return this.pieces.reduce((inPlace, piece, i) => {\n        return piece.id === i ? inPlace + 1 : inPlace;\n      }, 0);\n    }\n\n    shufflePieces() {\n      debugger;\n      let pieces = new Array(this.numberOfPieces);\n      let random;\n      let visited = [];\n      let path = '';\n\n      for (let i = 0; i < this.numberOfPieces; i++) {\n        random = Math.floor(Math.random() * this.numberOfPieces);\n\n        while (visited.indexOf(random) !== -1) {\n          random = Math.floor(Math.random() * this.numberOfPieces);\n        }\n\n        visited.push(random);\n        path = `url(https://firebasestorage.googleapis.com/v0/b/puzzle-ebd10.appspot.com/o/images%2F${this.folder}%2F${this.image}%2F${random}.jpg?alt=media)`; //url(https://firebasestorage.googleapis.com/v0/b/puzzle-ebd10.appspot.com/o/images%2Fvancouver%2F14%2F14.jpg?alt=media)\n\n        pieces[i] = {\n          index: i,\n          id: random,\n          misplaced: true,\n          path\n        };\n      }\n\n      this.pieces = pieces;\n    }\n\n    isOver() {\n      this.over = this.numberOfPiecesInPlace === this.numberOfPieces;\n      return this.over;\n    }\n\n    swap(dragged, dropped, field) {\n      debugger; // let temp: number = dragged.id;\n      // dragged.id = dropped.id;\n      // dropped.id= temp;\n      // let temp: Piece = dragged;\n      // dragged = dropped;\n      // dropped = temp;\n\n      if (field === \"id\") {\n        let temp = dragged.id;\n        dragged.id = dropped.id;\n        dropped.id = temp;\n      } else {\n        let temp = dragged.path;\n        dragged.path = dropped.path;\n        dropped.path = temp;\n      }\n    }\n\n    swapPieces(dragged, dropped) {\n      this.swap(dragged, dropped, 'id');\n      this.swap(dragged, dropped, 'path');\n    }\n\n    misplacedCheck(piece) {\n      piece.misplaced = !(piece.id === piece.index);\n\n      if (piece.misplaced) {\n        this.fails++;\n      }\n    }\n\n    misplacedPiecesCheck(dragged, dropped) {\n      this.misplacedCheck(dragged);\n      this.misplacedCheck(dropped);\n    }\n\n    dragAndDrop(dragged, dropped) {\n      if (!this.isOver() && dragged !== dropped) {\n        this.swapPieces(dragged, dropped);\n        this.misplacedPiecesCheck(dragged, dropped);\n        this.statsChange.emit({\n          moves: ++this.moves,\n          fails: this.fails,\n          over: this.isOver()\n        });\n      }\n    }\n\n    onDrag(ev) {\n      ev.dataTransfer.setData(\"index\", ev.target.id);\n    }\n\n    onDrop(ev) {\n      ev.preventDefault();\n      this.dragAndDrop(this.pieces[ev.dataTransfer.getData(\"index\")], this.pieces[ev.target.id]);\n    }\n\n    onDragOver(ev) {\n      ev.preventDefault();\n    }\n\n  }\n\n  BoardComponent.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)();\n  };\n\n  BoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    inputs: {\n      folder: \"folder\",\n      image: \"image\"\n    },\n    outputs: {\n      statsChange: \"statsChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 3,\n    consts: [[1, \"board\"], [\"draggable\", \"true\", 3, \"id\", \"backgroundImage\", \"placed\", \"dragstart\", \"drop\", \"dragover\", 4, \"ngFor\", \"ngForOf\"], [\"draggable\", \"true\", 3, \"id\", \"dragstart\", \"drop\", \"dragover\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 1, 5, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"over\", ctx.over);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.pieces);\n      }\n    },\n    directives: [i1.NgForOf],\n    styles: [\".board[_ngcontent-%COMP%]{font-size:0;text-align:center;width:70%;margin:10px auto}.board[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{width:24%;border:1px solid black;display:inline-block;background-size:100% 100%;padding:0}.board[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:after{content:\\\"\\\";display:block;padding-bottom:100%}.board[_ngcontent-%COMP%]   .placed[_ngcontent-%COMP%]{opacity:.3}.board.over[_ngcontent-%COMP%]   .placed[_ngcontent-%COMP%]{opacity:1}@media screen and (max-width: 1200px){.board[_ngcontent-%COMP%]{width:100%}}\"]\n  });\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}